{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as Types from \"../Actions/types\";\nimport { getDataFromServer } from \"../Service\";\n\nfunction* createUser(action) {\n  try {\n    const reqMethod = \"POST\";\n    const baseURL = \"http://localhost:4000/users\";\n    let formBody = action.payload;\n    console.log(\"Action =>\" + JSON.stringify(action));\n    const response = yield call(getDataFromServer, baseURL, reqMethod, formBody);\n    const result = yield response.json();\n\n    if (result.error) {\n      yield put({\n        type: Types.CREATE_USER_RESPONSE_FAILURE,\n        error: result.error\n      });\n    } else {\n      yield put({\n        type: Types.CREATE_USER_RESPONSE_SUCCESS,\n        result\n      });\n    }\n  } catch (error) {\n    console.log(\"Error at Saga createUser\", error);\n  }\n}\n\nexport default function* rootSaga(params) {\n  yield takeLatest(Types.CREATE_USER, createUser);\n  console.log(\"ROOT SAGA\");\n}","map":{"version":3,"sources":["/Users/nanjundamurthy/Desktop/Web/React/test-site/src/Store/sagas.js"],"names":["call","put","takeLatest","Types","getDataFromServer","createUser","action","reqMethod","baseURL","formBody","payload","console","log","JSON","stringify","response","result","json","error","type","CREATE_USER_RESPONSE_FAILURE","CREATE_USER_RESPONSE_SUCCESS","rootSaga","params","CREATE_USER"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,SAASC,iBAAT,QAAkC,YAAlC;;AAEA,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,SAAS,GAAG,MAAlB;AACA,UAAMC,OAAO,GAAG,6BAAhB;AACA,QAAIC,QAAQ,GAAGH,MAAM,CAACI,OAAtB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcC,IAAI,CAACC,SAAL,CAAeR,MAAf,CAA1B;AACA,UAAMS,QAAQ,GAAG,MAAMf,IAAI,CACzBI,iBADyB,EAEzBI,OAFyB,EAGzBD,SAHyB,EAIzBE,QAJyB,CAA3B;AAMA,UAAMO,MAAM,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAArB;;AACA,QAAID,MAAM,CAACE,KAAX,EAAkB;AAChB,YAAMjB,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEhB,KAAK,CAACiB,4BADJ;AAERF,QAAAA,KAAK,EAAEF,MAAM,CAACE;AAFN,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMjB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEhB,KAAK,CAACkB,4BAAd;AAA4CL,QAAAA;AAA5C,OAAD,CAAT;AACD;AACF,GArBD,CAqBE,OAAOE,KAAP,EAAc;AACdP,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCM,KAAxC;AACD;AACF;;AAED,eAAe,UAAUI,QAAV,CAAmBC,MAAnB,EAA2B;AACxC,QAAMrB,UAAU,CAACC,KAAK,CAACqB,WAAP,EAAoBnB,UAApB,CAAhB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as Types from \"../Actions/types\";\nimport { getDataFromServer } from \"../Service\";\n\nfunction* createUser(action) {\n  try {\n    const reqMethod = \"POST\";\n    const baseURL = \"http://localhost:4000/users\";\n    let formBody = action.payload;\n\n    console.log(\"Action =>\" + JSON.stringify(action));\n    const response = yield call(\n      getDataFromServer,\n      baseURL,\n      reqMethod,\n      formBody\n    );\n    const result = yield response.json();\n    if (result.error) {\n      yield put({\n        type: Types.CREATE_USER_RESPONSE_FAILURE,\n        error: result.error\n      });\n    } else {\n      yield put({ type: Types.CREATE_USER_RESPONSE_SUCCESS, result });\n    }\n  } catch (error) {\n    console.log(\"Error at Saga createUser\", error);\n  }\n}\n\nexport default function* rootSaga(params) {\n  yield takeLatest(Types.CREATE_USER, createUser);\n  console.log(\"ROOT SAGA\");\n}\n"]},"metadata":{},"sourceType":"module"}